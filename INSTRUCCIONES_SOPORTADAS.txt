===============================================================================
                    MANUAL COMPLETO DE INSTRUCCIONES SOPORTADAS
                           Parser de Lenguaje Natural a C++
                                    Versión 2025
===============================================================================

ÍNDICE:
1. GESTIÓN DE VARIABLES
2. OPERACIONES ARITMÉTICAS
3. ENTRADA Y SALIDA DE DATOS
4. LISTAS Y COLECCIONES
5. ESTRUCTURAS DE CONTROL
6. FUNCIONES
7. ESTRUCTURAS DE DATOS (STRUCTS)
8. MANEJO DE ARCHIVOS
9. CONTROL DE PROGRAMA
10. EJEMPLOS COMPLETOS
11. NOTAS TÉCNICAS

===============================================================================
1. GESTIÓN DE VARIABLES
===============================================================================

1.1 CREACIÓN DE VARIABLES (SINTAXIS BÁSICA)
--------------------------------------------
✓ Crear variable número entero [nombre]
✓ Crear variable número decimal [nombre]
✓ Crear variable texto [nombre]
✓ Crear variable cadena [nombre]
✓ Crear variable booleano [nombre]

ALTERNATIVAS SINTÁCTICAS:
✓ Definir variable número entero [nombre]
✓ Definir variable número decimal [nombre]
✓ Definir variable texto [nombre]

EJEMPLOS:
- Crear variable número entero edad
- Definir variable número decimal precio
- Crear variable texto nombre
- Crear variable booleano activo

1.2 CREACIÓN CON VALORES INICIALES
-----------------------------------
✓ Crear variable número entero [nombre] con valor inicial [valor]
✓ Crear variable número decimal [nombre] con valor inicial [valor]
✓ Crear variable texto [nombre] con valor inicial "[texto]"
✓ Crear variable booleano [nombre] con valor inicial verdadero
✓ Crear variable booleano [nombre] con valor inicial falso

EJEMPLOS:
- Crear variable número entero contador con valor inicial 0
- Crear variable número decimal pi con valor inicial 3.14
- Crear variable texto saludo con valor inicial "Hola mundo"
- Crear variable booleano encontrado con valor inicial falso

1.3 ASIGNACIÓN DE VALORES
-------------------------
✓ Asignar [valor] a [variable]
✓ Asignar [valor] al [variable]
✓ Asignar valor [valor] a [variable]
✓ Asignar valor [valor] al [variable]
✓ Asignar [valor] al valor de [variable]

PARA CADENAS:
✓ Asignar "[texto]" a [variable]

PARA BOOLEANOS:
✓ Asignar verdadero a [variable]
✓ Asignar falso a [variable]

EJEMPLOS:
- Asignar 25 a edad
- Asignar valor 100 al precio
- Asignar "Juan" al nombre
- Asignar 10 al valor de contador
- Asignar verdadero a encontrado

===============================================================================
2. OPERACIONES ARITMÉTICAS
===============================================================================

2.1 OPERACIONES BINARIAS SIMPLES
---------------------------------
✓ Sumar [num1] y [num2]
✓ Restar [num1] y [num2]
✓ Multiplicar [num1] y [num2]
✓ Dividir [num1] entre [num2]

EJEMPLOS:
- Sumar 5 y 3
- Restar 10 y 4
- Multiplicar 6 y 7
- Dividir 20 entre 5

2.2 OPERACIONES AGREGADAS
--------------------------
✓ Sumar los números [n1], [n2], [n3]...
✓ Sumar los números [n1], [n2] y [n3] y mostrar el resultado

EJEMPLOS:
- Sumar los números 10, 20, 30
- Sumar los números 5, 15, 25 y mostrar el resultado

2.3 CÁLCULOS COMPLEJOS
----------------------
✓ Calcular [variable1] [operación] [variable2] y asignar a [resultado]
✓ Calcular [expresión compleja] y asignar a [resultado]

OPERACIONES SOPORTADAS EN EXPRESIONES:
- "más" o "mas" → +
- "menos" → -
- "multiplicado por" → *
- "dividido entre" → /

EJEMPLOS:
- Calcular a más b y asignar a suma
- Calcular precio multiplicado por cantidad y asignar a total
- Calcular a multiplicado por b más 10 dividido entre 2 y asignar a resultado

2.4 OPERACIONES CON VARIABLES
-----------------------------
✓ [variable] multiplicar por [variable2]
✓ [variable] restar [número]

EJEMPLOS:
- contador multiplicar por factor
- edad restar 1

===============================================================================
3. ENTRADA Y SALIDA DE DATOS
===============================================================================

3.1 ENTRADA DE DATOS
--------------------
✓ Ingresar valor [variable]
✓ Ingresar valor de [variable]
✓ Ingresar los valores de la lista
✓ Ingresar valor de cada [elemento] en la lista
✓ Pedir al usuario ingresar cada número
✓ Solicitar al usuario que ingrese [variable]

EJEMPLOS:
- Ingresar valor edad
- Ingresar valor de precio
- Ingresar los valores de la lista
- Pedir al usuario ingresar cada número

3.2 SALIDA DE DATOS
-------------------
✓ Mostrar "[mensaje]"
✓ Imprimir "[mensaje]"
✓ Mostrar [variable]
✓ Imprimir [variable]
✓ Mostrar "[mensaje]" y [variable]
✓ Imprimir "[mensaje]" y [variable]

EJEMPLOS:
- Mostrar "Bienvenido"
- Imprimir edad
- Mostrar "La edad es: " y edad
- Imprimir "Resultado: " y total

===============================================================================
4. LISTAS Y COLECCIONES
===============================================================================

4.1 CREACIÓN DE LISTAS
-----------------------
✓ Crear lista de números enteros con [N] elementos
✓ Crear una lista de números enteros con [N] elementos
✓ Crear un vector de números enteros con [N] elementos
✓ Crear arreglo de números enteros con [N] elementos
✓ Crear lista de [N] números enteros
✓ Crear una lista de [N] números enteros

TIPOS SOPORTADOS:
- números enteros → std::vector<int>
- números decimales → std::vector<double>
- texto → std::vector<std::string>

EJEMPLOS:
- Crear lista de números enteros con 5 elementos
- Crear una lista de 10 números decimales
- Crear vector de texto con 3 elementos
- Crear lista de texto para guardar los países

4.2 ASIGNACIÓN DE ELEMENTOS
---------------------------
✓ Asignar valor [valor] al primer elemento de la lista
✓ Asignar valor [valor] al segundo elemento de la lista
✓ Asignar valor [valor] al tercer elemento de la lista
✓ Asignar valor [valor] al cuarto elemento de la lista
✓ Asignar valor [valor] al quinto elemento de la lista
...
✓ Asignar valor [valor] al décimo elemento de la lista
✓ Asignar valor [valor] al último elemento de la lista

EJEMPLOS:
- Asignar valor 10 al primer elemento de la lista
- Asignar valor 20 al segundo elemento del vector
- Asignar valor "Juan" al tercer elemento de la lista

4.3 OPERACIONES DE LISTA
-------------------------
✓ Agregar [valor] a la lista
✓ Agregar [valor] al vector
✓ Añadir [valor] a la lista
✓ Eliminar el primer elemento de la lista
✓ Eliminar el segundo elemento de la lista
...
✓ Eliminar el décimo elemento de la lista
✓ Eliminar el último elemento de la lista
✓ Quitar el [ordinal] elemento del vector

EJEMPLOS:
- Agregar 50 a la lista
- Eliminar el último elemento del vector
- Quitar el primer elemento de la lista

4.4 ITERACIÓN Y PROCESAMIENTO
------------------------------
✓ Recorrer la lista
✓ Recorrer el vector
✓ Recorrer la lista y sumar cada elemento en [variable]
✓ Recorrer la lista y sumar cada elemento al [variable]

EJEMPLOS:
- Recorrer la lista
- Recorrer el vector y sumar cada elemento en total

4.5 VISUALIZACIÓN DE LISTAS
----------------------------
✓ Imprimir todos los elementos de la lista
✓ Imprimir todos los elementos del vector
✓ Mostrar todos los elementos de la lista
✓ Mostrar todos los elementos del vector
✓ Imprimir todos los elementos de la arreglo

EJEMPLOS:
- Imprimir todos los elementos de la lista
- Mostrar todos los elementos del vector

4.6 ORDENAMIENTO
----------------
✓ Ordenar la lista
✓ Ordenar la lista de forma ascendente
✓ Ordenar la lista de forma descendente
✓ Ordenar el vector
✓ Ordenar el arreglo

EJEMPLOS:
- Ordenar la lista
- Ordenar el vector de forma descendente

===============================================================================
5. ESTRUCTURAS DE CONTROL
===============================================================================

5.1 CONDICIONALES SIMPLES
--------------------------
✓ Si [variable] mayor que [valor]
✓ Si [variable] menor que [valor]
✓ Si [variable] igual a [valor]
✓ Si [variable] mayor o igual que [valor]
✓ Si [variable] menor o igual que [valor]
✓ Si [variable] diferente de [valor]

ALTERNATIVAS:
✓ Si [variable] es mayor que [valor]
✓ Si [variable] es menor que [valor]
✓ Si [variable] es igual a [valor]

PARA BOOLEANOS:
✓ Si [variable] igual a verdadero
✓ Si [variable] igual a falso

EJEMPLOS:
- Si edad mayor que 18
- Si precio menor o igual que 100
- Si encontrado igual a verdadero

5.2 CONDICIONALES ANIDADOS
---------------------------
✓ Sino si [variable] [condición] [valor]
✓ Sino

ESTRUCTURA COMPLETA:
Si [condición1]
    [instrucciones]
Sino si [condición2]
    [instrucciones]
Sino si [condición3]
    [instrucciones]
Sino
    [instrucciones]

EJEMPLO COMPLETO:
Si edad menor que 13
    Asignar "Niño" a categoria
Sino si edad menor que 18
    Asignar "Adolescente" a categoria
Sino si edad menor que 65
    Asignar "Adulto" a categoria
Sino
    Asignar "Adulto Mayor" a categoria

5.3 BUCLES WHILE
----------------
✓ Mientras [variable] mayor que [valor]
✓ Mientras [variable] menor que [valor]
✓ Mientras [variable] igual a [valor]
✓ Mientras el [variable] sea menor que [valor] sumar [incremento] al [variable]

EJEMPLOS:
- Mientras contador menor que 10
- Mientras n mayor que 1
- Mientras el numero sea menor que 100 sumar 10 al numero

5.4 BUCLES FOR (REPETIR)
------------------------
✓ Repetir [N] veces mostrar "[mensaje]"
✓ Repetir [N] veces imprimir "[mensaje]"

EJEMPLOS:
- Repetir 5 veces mostrar "Hola"
- Repetir 3 veces imprimir "Iteración completada"

===============================================================================
6. FUNCIONES
===============================================================================

6.1 DEFINICIÓN DE FUNCIONES (UN PARÁMETRO)
-------------------------------------------
✓ Definir función número entero [nombre] con parámetro número entero [param]
✓ Definir función número decimal [nombre] con parámetro número decimal [param]
✓ Definir función texto [nombre] con parámetro texto [param]
✓ Definir función booleano [nombre] con parámetro booleano [param]

EJEMPLOS:
- Definir función número entero factorial con parámetro número entero n
- Definir función número decimal calcular con parámetro número decimal x

6.2 DEFINICIÓN DE FUNCIONES (MÚLTIPLES PARÁMETROS)
---------------------------------------------------
✓ Definir función [tipo] [nombre] con parámetro [tipo1] [param1] y [tipo2] [param2]

TIPOS SOPORTADOS:
- número entero → int
- número decimal → double
- texto → std::string
- booleano → bool

EJEMPLOS:
- Definir función número entero sumar con parámetro número entero a y número entero b
- Definir función número decimal promedio con parámetro número decimal x y número decimal y

6.3 RETORNO DE VALORES
----------------------
✓ Retornar [variable]
✓ Retornar [valor]

EJEMPLOS:
- Retornar resultado
- Retornar suma
- Retornar 0

6.4 LLAMADAS A FUNCIONES
------------------------
✓ Asignar valor a [variable] con llamar función [nombre]([arg])
✓ Asignar valor a [variable] con llamar función [nombre]([arg1], [arg2])
✓ Asignar valor a [variable] con llamar función [nombre]([arg1] y [arg2])

EJEMPLOS:
- Asignar valor a resultado con llamar función factorial(5)
- Asignar valor a suma con llamar función sumar(x, y)
- Asignar valor a promedio con llamar función calcular(a y b)

===============================================================================
7. ESTRUCTURAS DE DATOS (STRUCTS)
===============================================================================

7.1 DEFINICIÓN DE ESTRUCTURAS
------------------------------
✓ Crear estructura [Nombre] con [campo1] ([tipo1]), [campo2] ([tipo2]) y [campo3] ([tipo3])

TIPOS SOPORTADOS PARA CAMPOS:
- entero → int
- decimal → double
- cadena de texto → std::string
- texto → std::string

EJEMPLO:
- Crear estructura Estudiante con nombre (cadena de texto), edad (entero) y nota (decimal)

7.2 LISTAS DE ESTRUCTURAS
-------------------------
✓ Crear lista de [Estructura] con [N] elementos

EJEMPLO:
- Crear lista de Estudiante con 3 elementos

7.3 ENTRADA DE DATOS PARA ESTRUCTURAS
-------------------------------------
✓ Ingresar los datos de cada [estructura]

EJEMPLO:
- Ingresar los datos de cada estudiante

7.4 VISUALIZACIÓN DE ESTRUCTURAS
---------------------------------
✓ Recorrer la lista y mostrar [campo1] y [campo2]

EJEMPLO:
- Recorrer la lista y mostrar nombre y nota

===============================================================================
8. MANEJO DE ARCHIVOS
===============================================================================

8.1 LECTURA DE DATOS
--------------------
✓ Leer los datos desde un archivo llamado [archivo.txt]
✓ Cargar los datos desde un archivo
✓ Importar los datos desde un archivo
✓ Leer desde [archivo]

EJEMPLOS:
- Leer los datos desde un archivo llamado datos.txt
- Cargar los datos desde un archivo

8.2 OPERACIONES CON DATOS DE ARCHIVO
------------------------------------
Para archivos de países y capitales (formato: País,Capital):
✓ Imprimir los países y las capitales
✓ Mostrar los países y las capitales

REQUISITO: Debe existir lista de "países" y lista de "capitales"

EJEMPLO:
- Crear una lista de texto para guardar los países
- Crear una lista de texto para guardar las capitales
- Leer los datos desde un archivo llamado datos.txt
- Imprimir los países y las capitales

===============================================================================
9. CONTROL DE PROGRAMA
===============================================================================

✓ Comenzar programa
✓ Terminar programa

NOTA: Estas instrucciones son opcionales y organizacionales.

===============================================================================
10. EJEMPLOS COMPLETOS
===============================================================================

10.1 EJEMPLO BÁSICO - VARIABLES Y CONDICIONALES
------------------------------------------------
Comenzar programa
Crear variable número entero edad
Ingresar valor edad
Si edad mayor que 18
    Mostrar "Es mayor de edad"
Sino
    Mostrar "Es menor de edad"
Terminar programa

10.2 EJEMPLO INTERMEDIO - LISTAS Y OPERACIONES
-----------------------------------------------
Comenzar programa
Crear una lista de 5 números enteros
Asignar valor 10 al primer elemento de la lista
Asignar valor 20 al segundo elemento de la lista
Asignar valor 30 al tercer elemento de la lista
Agregar 40 a la lista
Imprimir todos los elementos de la lista
Terminar programa

10.3 EJEMPLO AVANZADO - FUNCIONES MÚLTIPLES PARÁMETROS
-------------------------------------------------------
Comenzar programa
Definir función número entero sumar con parámetro número entero a y número entero b
    Crear variable número entero suma
    Calcular a más b y asignar a suma
    Retornar suma
Crear variable número entero x con valor inicial 5
Crear variable número entero y con valor inicial 3
Crear variable número entero resultado
Asignar valor a resultado con llamar función sumar(x, y)
Mostrar "El resultado es: " y resultado
Terminar programa

10.4 EJEMPLO COMPLEJO - CONDICIONALES ANIDADOS
-----------------------------------------------
Comenzar programa
Crear variable número entero edad
Crear variable texto categoria
Ingresar valor edad
Si edad menor que 13
    Asignar "Niño" a categoria
Sino si edad menor que 18
    Asignar "Adolescente" a categoria
Sino si edad menor que 65
    Asignar "Adulto" a categoria
Sino
    Asignar "Adulto Mayor" a categoria
Mostrar "Categoría: " y categoria
Terminar programa

10.5 EJEMPLO ESTRUCTURAS DE DATOS
----------------------------------
Comenzar programa
Crear estructura Estudiante con nombre (cadena de texto), edad (entero) y nota (decimal)
Crear lista de Estudiante con 3 elementos
Ingresar los datos de cada estudiante
Recorrer la lista y mostrar nombre y nota
Terminar programa

10.6 EJEMPLO CON ARCHIVO DE DATOS
----------------------------------
Comenzar programa
Crear una lista de texto para guardar los países
Crear una lista de texto para guardar las capitales
Leer los datos desde un archivo llamado datos.txt
Imprimir los países y las capitales
Terminar programa

===============================================================================
11. NOTAS TÉCNICAS IMPORTANTES
===============================================================================

11.1 TIPOS DE DATOS SOPORTADOS
-------------------------------
- número entero → int
- número decimal → double
- texto/cadena → std::string
- booleano → bool

11.2 SINÓNIMOS Y ALTERNATIVAS
-----------------------------
- "Crear" ≡ "Definir"
- "Mostrar" ≡ "Imprimir"
- "lista" ≡ "vector" ≡ "arreglo"
- "más" ≡ "mas"
- "verdadero" ≡ "true"
- "falso" ≡ "false"

11.3 ARTÍCULOS Y FLEXIBILIDAD
-----------------------------
Los siguientes artículos son OPCIONALES:
- "una", "un", "el", "la", "al", "del"

EJEMPLOS EQUIVALENTES:
- "Crear lista" ≡ "Crear una lista"
- "Asignar a variable" ≡ "Asignar al variable"

11.4 DETECCIÓN AUTOMÁTICA DE TIPOS
-----------------------------------
El parser detecta automáticamente:
- Números decimales (contienen punto o coma)
- División (convierte resultado a double)
- Cadenas (texto entre comillas)
- Booleanos (verdadero/falso)

11.5 MANEJO DE CONTEXTOS
------------------------
- Funciones: Variables locales y parámetros
- Bloques: Indentación automática
- Colecciones: Gestión de índices y tipos

11.6 INCLUDES AUTOMÁTICOS
-------------------------
Se generan automáticamente según uso:
- <iostream> para entrada/salida
- <vector> para listas
- <string> para texto
- <algorithm> para ordenamiento
- <fstream> para archivos

11.7 LIMITACIONES CONOCIDAS
---------------------------
NO SOPORTADO:
- Operadores lógicos (AND, OR, NOT)
- Matrices 2D
- Loops "para cada"
- Operaciones matemáticas avanzadas (potencias, raíces)
- Punteros o referencias
- Classes (solo structs)

===============================================================================
                                FIN DEL MANUAL
===============================================================================

VERSIÓN: 2025
AUTOR: Parser de Lenguaje Natural a C++
FECHA: Septiembre 28, 2025

Para reportar problemas o sugerencias, revisar el código fuente en:
parser.cpp - Función principal de conversión
window.cpp - Interfaz de usuario

¡Gracias por usar este parser!
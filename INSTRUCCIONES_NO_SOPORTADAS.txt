===============================================================================
                      INSTRUCCIONES NO SOPORTADAS POR EL PARSER
                           Parser de Lenguaje Natural a C++
                              Limitaciones y Restricciones
===============================================================================

ADVERTENCIA: Las siguientes instrucciones NO están implementadas en el parser
actual y resultarán en errores de "Instrucción no reconocida" o código C++
incorrecto. Use esta lista como referencia para evitar estas construcciones.

===============================================================================
1. OPERADORES LÓGICOS COMPLEJOS
===============================================================================

❌ NO SOPORTADO:
- Si edad mayor que 18 Y menor que 65
- Si nombre igual a "Juan" O igual a "Pedro"
- Si NO encontrado
- Si (edad mayor que 18) Y (activo igual a verdadero)
- Mientras x mayor que 0 Y x menor que 100

❌ OPERADORES LÓGICOS:
- "Y" / "AND"
- "O" / "OR" 
- "NO" / "NOT"
- Paréntesis para agrupar condiciones

ALTERNATIVA SOPORTADA:
Usar condicionales anidados:
✓ Si edad mayor que 18
    Si edad menor que 65
        [instrucciones]

===============================================================================
2. OPERACIONES MATEMÁTICAS AVANZADAS
===============================================================================

❌ NO SOPORTADO:
- Elevar x a la potencia y
- Elevar x a la 2
- Calcular x elevado a y
- Obtener raíz cuadrada de x
- Calcular raíz cuadrada de número
- Obtener raíz cúbica de x
- Calcular logaritmo de x
- Obtener logaritmo base 10 de número
- Calcular seno de x
- Obtener coseno de ángulo
- Calcular tangente de x
- Obtener valor absoluto de x
- Redondear x al entero más cercano

❌ FUNCIONES MATEMÁTICAS:
- Potencias (^, pow)
- Raíces (√, cbrt)
- Logaritmos (log, ln)
- Trigonométricas (sin, cos, tan)
- Valor absoluto (abs)
- Redondeo (round, floor, ceil)

===============================================================================
3. BUCLES AVANZADOS
===============================================================================

❌ NO SOPORTADO:
- Para cada elemento en la lista
- Para i desde 1 hasta 10
- Para i = 1 hasta n incrementar 2
- Repetir hasta que condición sea verdadera
- Hacer mientras condición sea falsa
- Recorrer desde el primer elemento hasta el último
- Para cada país en la lista de países

❌ CONSTRUCCIONES DE BUCLE:
- "Para cada" / "For each"
- "Para i desde X hasta Y"
- "Repetir hasta que"
- "Hacer mientras"
- Incrementos personalizados

ALTERNATIVAS SOPORTADAS:
✓ Mientras [condición]
✓ Repetir [N] veces
✓ Recorrer la lista

===============================================================================
4. ESTRUCTURAS DE DATOS AVANZADAS
===============================================================================

❌ NO SOPORTADO:
- Crear matriz de 3x3 números enteros
- Crear tabla de 5 filas y 4 columnas
- Crear arreglo bidimensional de 10x10
- Asignar valor 5 a matriz[2][3]
- Acceder a tabla[fila][columna]
- Crear diccionario de palabras y definiciones
- Crear mapa con claves y valores
- Crear conjunto de números únicos
- Crear pila de elementos
- Crear cola de tareas

❌ ESTRUCTURAS DE DATOS:
- Matrices 2D/3D
- Arreglos multidimensionales
- Diccionarios/Mapas
- Conjuntos (Sets)
- Pilas (Stacks)
- Colas (Queues)
- Listas enlazadas

ALTERNATIVA SOPORTADA:
✓ Solo arrays/vectores 1D
✓ Structs personalizados

===============================================================================
5. MANIPULACIÓN AVANZADA DE CADENAS
===============================================================================

❌ NO SOPORTADO:
- Concatenar cadena1 con cadena2
- Unir texto1 y texto2
- Obtener longitud de cadena
- Convertir texto a mayúsculas
- Convertir texto a minúsculas
- Extraer subcadena desde posición 2 hasta 5
- Buscar "palabra" en texto
- Reemplazar "viejo" con "nuevo" en texto
- Dividir texto por espacios
- Invertir el orden de la cadena

❌ OPERACIONES DE STRING:
- Concatenación explícita
- Conversión de case
- Subcadenas
- Búsqueda en texto
- Reemplazo de texto
- División de strings
- Inversión de texto

ALTERNATIVA LIMITADA:
✓ Solo asignación directa y salida con concatenación simple

===============================================================================
6. CONVERSIONES DE TIPOS
===============================================================================

❌ NO SOPORTADO:
- Convertir número a texto
- Convertir texto a número
- Transformar entero a decimal
- Cambiar decimal a entero
- Convertir booleano a texto
- Parsear número desde cadena
- Obtener código ASCII de carácter
- Convertir ASCII a carácter

❌ CASTING Y CONVERSIONES:
- Conversiones explícitas entre tipos
- Parsing de strings a números
- Conversiones ASCII/char
- Transformaciones de tipos

===============================================================================
7. MANEJO DE ERRORES Y EXCEPCIONES
===============================================================================

❌ NO SOPORTADO:
- Intentar [operación] capturar error
- Si ocurre error entonces [acción]
- Manejar excepción de división por cero
- Validar que entrada sea número válido
- Capturar error de archivo no encontrado
- Lanzar excepción personalizada
- Finalizar programa con error

❌ CONTROL DE ERRORES:
- Try/Catch blocks
- Manejo de excepciones
- Validación de entrada
- Error handling
- Assertions

===============================================================================
8. PROGRAMACIÓN ORIENTADA A OBJETOS
===============================================================================

❌ NO SOPORTADO:
- Crear clase Persona con métodos
- Definir constructor para clase
- Crear método público calcular
- Heredar clase Estudiante de Persona
- Implementar interfaz Comparable
- Crear objeto de tipo Persona
- Llamar método objeto.calcular()
- Acceder a propiedad objeto.nombre
- Definir método privado interno
- Sobrecargar operador +

❌ CONCEPTOS OOP:
- Clases y objetos
- Constructores/destructores
- Métodos públicos/privados
- Herencia
- Polimorfismo
- Interfaces
- Sobrecarga de operadores
- Encapsulación

ALTERNATIVA LIMITADA:
✓ Solo structs simples con campos públicos

===============================================================================
9. MANEJO AVANZADO DE ARCHIVOS
===============================================================================

❌ NO SOPORTADO:
- Escribir datos al archivo salida.txt
- Crear nuevo archivo con nombre "reporte"
- Copiar archivo origen.txt a destino.txt
- Eliminar archivo temporal.txt
- Verificar si archivo existe
- Obtener tamaño del archivo
- Listar todos los archivos en directorio
- Abrir archivo en modo escritura
- Cerrar archivo después de usar
- Leer archivo línea por línea

❌ OPERACIONES DE ARCHIVO:
- Escritura de archivos
- Creación de archivos
- Operaciones del sistema de archivos
- Verificación de existencia
- Metadatos de archivos
- Lectura línea por línea

ALTERNATIVA LIMITADA:
✓ Solo lectura de archivos predefinidos para datos

===============================================================================
10. OPERACIONES DE TIEMPO Y FECHA
===============================================================================

❌ NO SOPORTADO:
- Obtener fecha actual
- Obtener hora actual
- Calcular diferencia entre fechas
- Formatear fecha como "dd/mm/yyyy"
- Agregar 30 días a fecha
- Obtener día de la semana
- Calcular edad desde fecha de nacimiento
- Medir tiempo de ejecución
- Pausar programa por 5 segundos
- Crear temporizador de 1 minuto

❌ OPERACIONES TEMPORALES:
- Fechas y horas
- Cálculos temporales
- Formateo de fechas
- Temporizadores
- Medición de tiempo

===============================================================================
11. ENTRADA/SALIDA AVANZADA
===============================================================================

❌ NO SOPORTADO:
- Leer carácter por carácter
- Obtener línea completa de entrada
- Mostrar sin salto de línea
- Limpiar pantalla
- Cambiar color del texto
- Posicionar cursor en coordenadas (x,y)
- Crear menú interactivo
- Detectar presión de tecla
- Ocultar entrada de contraseña
- Formatear salida con decimales específicos

❌ I/O AVANZADO:
- Lectura carácter a carácter
- Control de formato de salida
- Manipulación de consola
- Interfaces de usuario
- Formateo avanzado

===============================================================================
12. OPERACIONES CON MEMORIA Y PUNTEROS
===============================================================================

❌ NO SOPORTADO:
- Crear puntero a variable
- Asignar dirección de memoria
- Desreferenciar puntero
- Reservar memoria dinámicamente
- Liberar memoria reservada
- Crear referencia a variable
- Pasar por referencia a función
- Obtener dirección de variable
- Crear array dinámico
- Manejar memoria manualmente

❌ MANEJO DE MEMORIA:
- Punteros
- Referencias
- Memoria dinámica
- Malloc/free
- New/delete
- Paso por referencia

===============================================================================
13. OPERACIONES CONCURRENTES/PARALELAS
===============================================================================

❌ NO SOPORTADO:
- Ejecutar en paralelo
- Crear hilo de ejecución
- Sincronizar hilos
- Bloquear acceso concurrente
- Ejecutar función en segundo plano
- Esperar que termine hilo
- Crear mutex para sincronización
- Ejecutar tareas simultáneamente

❌ CONCURRENCIA:
- Multithreading
- Paralelismo
- Sincronización
- Mutexes
- Semáforos

===============================================================================
14. COMUNICACIÓN Y REDES
===============================================================================

❌ NO SOPORTADO:
- Conectar a servidor web
- Enviar petición HTTP
- Recibir datos de internet
- Crear servidor local
- Escuchar en puerto 8080
- Enviar email
- Descargar archivo de URL
- Conectar a base de datos
- Ejecutar consulta SQL

❌ NETWORKING:
- Conexiones HTTP/HTTPS
- Sockets
- APIs REST
- Bases de datos
- Email
- FTP

===============================================================================
15. EJEMPLOS DE CONSTRUCCIONES PROBLEMÁTICAS
===============================================================================

❌ EJEMPLO 1 - LÓGICA COMPLEJA:
Comenzar programa
Crear variable número entero edad
Crear variable booleano activo
Ingresar valor edad
Si edad mayor que 18 Y activo igual a verdadero  // ❌ "Y" no soportado
    Mostrar "Usuario válido"
Sino
    Mostrar "Usuario inválido"
Terminar programa

❌ EJEMPLO 2 - BUCLE AVANZADO:
Comenzar programa
Crear lista de números enteros con 10 elementos
Para cada elemento en la lista                   // ❌ "Para cada" no soportado
    Mostrar elemento
Terminar programa

❌ EJEMPLO 3 - OPERACIONES MATEMÁTICAS:
Comenzar programa
Crear variable número decimal base
Crear variable número entero exponente
Ingresar valor base
Ingresar valor exponente
Elevar base a la potencia exponente              // ❌ Potencias no soportadas
Mostrar resultado
Terminar programa

❌ EJEMPLO 4 - MANIPULACIÓN DE STRINGS:
Comenzar programa
Crear variable texto nombre
Crear variable texto apellido
Ingresar valor nombre
Ingresar valor apellido
Concatenar nombre con apellido                   // ❌ Concatenación no soportada
Convertir resultado a mayúsculas                 // ❌ Conversión no soportada
Mostrar resultado
Terminar programa

❌ EJEMPLO 5 - MATRIZ 2D:
Comenzar programa
Crear matriz de 3x3 números enteros             // ❌ Matrices no soportadas
Asignar valor 1 a matriz[0][0]                  // ❌ Acceso 2D no soportado
Para i desde 0 hasta 2                          // ❌ "Para desde hasta" no soportado
    Para j desde 0 hasta 2                      // ❌ Bucles anidados complejos
        Mostrar matriz[i][j]                     // ❌ Acceso 2D no soportado
Terminar programa

===============================================================================
16. MENSAJES DE ERROR COMUNES
===============================================================================

Cuando use instrucciones no soportadas, verá estos errores:

🔴 "Instrucción no reconocida: [instrucción]"
🔴 "No se pudo interpretar la expresión: [expresión]"
🔴 "No se pudo interpretar la condición del 'si': [condición]"
🔴 "Se encontró un 'sino' sin un 'si' previo"
🔴 "No se encontró ninguna colección disponible"

===============================================================================
17. RECOMENDACIONES PARA EVITAR PROBLEMAS
===============================================================================

✅ USAR EN SU LUGAR:

En lugar de operadores lógicos:
❌ Si x > 5 Y x < 10
✅ Si x mayor que 5
    Si x menor que 10
        [instrucciones]

En lugar de bucles complejos:
❌ Para cada elemento en lista
✅ Recorrer la lista

En lugar de matrices:
❌ Crear matriz de 3x3
✅ Crear lista de 9 elementos (simulando 3x3)

En lugar de operaciones matemáticas avanzadas:
❌ Elevar x a la 2
✅ Calcular x multiplicado por x y asignar a resultado

En lugar de manipulación de strings:
❌ Concatenar texto1 con texto2
✅ Mostrar texto1 y texto2

===============================================================================
18. FUTURAS EXTENSIONES POSIBLES
===============================================================================

Las siguientes funcionalidades PODRÍAN implementarse en versiones futuras:

🔄 PRIORIDAD ALTA:
- Operadores lógicos básicos (Y, O, NO)
- Bucles "para cada"
- Operaciones matemáticas básicas (potencias, raíces)

🔄 PRIORIDAD MEDIA:
- Matrices 2D básicas
- Manipulación simple de strings
- Conversiones de tipos básicas

🔄 PRIORIDAD BAJA:
- Manejo de errores básico
- Operaciones de archivo extendidas
- Formateo de salida avanzado

===============================================================================
                                   RESUMEN
===============================================================================

CATEGORÍAS NO SOPORTADAS:
❌ Operadores lógicos complejos (Y, O, NO)
❌ Operaciones matemáticas avanzadas (potencias, trigonometría)
❌ Bucles avanzados (para cada, para desde hasta)
❌ Estructuras de datos complejas (matrices, mapas, sets)
❌ Manipulación avanzada de strings
❌ Conversiones de tipos explícitas
❌ Manejo de errores y excepciones
❌ Programación orientada a objetos
❌ Manejo avanzado de archivos
❌ Operaciones de tiempo y fecha
❌ Entrada/salida avanzada
❌ Manejo de memoria y punteros
❌ Programación concurrente
❌ Comunicación y redes

TOTAL ESTIMADO DE LIMITACIONES: ~150+ construcciones no soportadas

RECOMENDACIÓN: Use solo las instrucciones listadas en 
"INSTRUCCIONES_SOPORTADAS.txt" para garantizar compatibilidad 100%.

===============================================================================
                                FIN DEL DOCUMENTO
===============================================================================

VERSIÓN: 2025
FECHA: Septiembre 28, 2025
PROPÓSITO: Documentar limitaciones del parser para evitar errores

Para funcionalidades soportadas, consultar:
INSTRUCCIONES_SOPORTADAS.txt